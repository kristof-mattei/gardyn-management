[workspace]
resolver = "2"
members = ["crates/*"]
package.version = "0.0.0-development"
package.edition = "2024"
package.rust-version = "1.88.0"
package.authors = ["Kristof Mattei"]
package.description = "Gardyn Management Database"
package.license-file = "LICENSE"
package.categories = ["fun"]
package.keywords = ["random"]
package.repository = "https://github.com/kristof-mattei/gardyn-management"

[workspace.lints.clippy]
# don't stop from compiling / running
all = "warn"
cargo = "warn"
complexity = "warn"
correctness = "warn"
pedantic = "warn"
perf = "warn"
# restriction = "warn"
style = "warn"
suspicious = "warn"

# this has 0 performance implications, the binding is compiled away, and it could cause issues
# when done blindly, plus it makes it harder to debug as you cannot put breakpoints on return
# values of functions (yet)
let_and_return = { level = "allow", priority = 127 }
# nothing we can do about multiple crate versions, so this lint just creates noise
multiple_crate_versions = { level = "allow", priority = 127 }
# this one is debatable. continue is used in places to be explicit, and to guard against
# issues when refactoring
needless_continue = { level = "allow", priority = 127 }
# this one causes confusion when combining variables (`foo`) and
# dereferenced variables (`foo.bar`). The latter cannot be inlined
# so we don't inline anything
uninlined-format-args = { level = "allow", priority = 127 }

[workspace.lints.rust]
let_underscore_drop = { level = "deny", priority = 127 }
non_ascii_idents = { level = "deny", priority = 127 }
